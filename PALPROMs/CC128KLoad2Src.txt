REM CC128K 128k PALPROM Loader
REM This will only work
REM with IntegraB V2 board.
REM The board must be in
REM Recovery Mode (long break)
REM before running this code.
REM (C) Ken Lowe 2024
REM Version 2.2 01/09/2024
DIM osblock% 16
DIM mcode% &100
DIM buffer% &4000
CLOSE#0
MODE7
PRINT"Integra-B V2 PALPROM Loader"
PRINT"---------------------------"'
PRINT"Checking for V2 Hardware.....";
IFNOT(FNvercheck)VDU7,129:PRINT"Error"''"Sorry. V2 Harware not detected.":END
VDU130:PRINT"Ok"'"Checking for recovery mode...";
IFNOT(FNrecmode)VDU7,129:PRINT"Error"''"Please press CTRL-BREAK for longer"'"than 1 second, and re-run this program":END
VDU130:PRINT"Ok"'"Loading image to Bank........";

bank%=11
numbanks%=8
REM wpinjmp%=0
REM wpoutjmp%=&40
ppflags%=&C0
ppflagsmask%=&3F
file$="SpellROM"

REM wpflags%=FNreadwpflags
REM wpinflags%=(wpinjmp% OR 2^(bank%-8))*&100
REM wpoutflags%=wpoutjmp%*&100

rrflags%=?&FE39*&100+(?&FE38 OR &F0)
rrinflags%=2^(bank%-8)*&100
rroutflags%=0

gblue%=148:gred%=145:ggreen%=146:gwhite%=151
jopen%=98:jclosed%=106

VDU130:PRINT;bank%
PROCassembly
PROCSetSWTable
PRINT"Checking jumper settings.....";
REM IF(wpinflags% AND wpoutflags%)<>0 VDU7,129:PRINT"Error"''"Incompatible wp in/out flags defined.":END
REM IF(rrinflags% AND rroutflags%)<>0 VDU7,129:PRINT"Error"''"Incompatible rr in/out flags defined.":END
REM tochg%=FNcheckwp+FNcheckrr
tochg%=FNcheckrr
REM IF(tochg%)<>0 VDU7,129:PRINT;tochg%;"xError"'':PROCjumpers:END
IF(tochg%)<>0 VDU7,129:PRINT;tochg%;"xError"'':PROCjumpers:END
?&FE3F=&FF:REM Disable all bank switching in CPLD
fh%=OPENIN(file$)
VDU130:PRINT"Ok"''"Loading ";file$;" to SWRAM banks..."
PRINT"Writing block ";
FORn%=0TOnumbanks%-1
s%=FNpartload(fh%,buffer%,n%*&4000,&4000)
IFs%PRINT"Failed":STOP
PRINT;n%;" ";
?newrom=FNswram(n%):?&70=buffer%MOD256:?&71=buffer%DIV256:?&72=0:?&73=&80
CALLsrload
NEXT
CLOSE#?osblock%
?&FE3A=0
X%=&3F
A%=(USR(ReadRtcRam) AND ppflagsmask%) OR ppflags%: CALL WriteRtcRam
PRINT''"Done. Press CTRL-BREAK to initialise"
END

DEFFNpartload(h%,l%,o%,c%)
A%=3:REM OSGBPB part load function
X%=osblock%MOD256
Y%=osblock%DIV256
?osblock%=h%:REM file handle
osblock%!1=l%:REM load addr
osblock%!5=c%:REM no of bytes to read
osblock%!9=o%:REM offset within file
q%=l%:REM preserve original load address
=((USR&FFD1 AND &FF000000) DIV &1000000) AND 1

DEFPROCassembly
flagsCopyLow%=&70
flagsCopyHigh%=&71
inflagsCopyLow%=&72
inflagsCopyHigh%=&73
outflagsCopyLow%=&74
outflagsCopyHigh%=&75
jpCount%=&76

FORpass%=0TO2STEP2
P%=mcode%
[OPT pass%
.srload
LDA&F4
STAoldrom
LDAnewrom
STA&F4
STA&FE30
LDY#0
.loop1
LDA(&70),Y:STA(&72),Y
INY:BNEloop1
INC&71:INC&73
BIT&73:BVCloop1
LDAoldrom
STA&F4
STA&FE30
RTS
.jumpers
LDA #0:STA jpCount%
LDX #15
.jmploop
ASL flagsCopyLow%:ROL flagsCopyHigh%:BCS checkForBlueRed
LDA #gwhite%:LDY #jopen%
ASL outflagsCopyLow%:ROL outflagsCopyHigh%
ASL inflagsCopyLow%:ROL inflagsCopyHigh%:BCC storeNewJumper
LDA #ggreen%:LDY #jclosed%
INC jpCount%
.storeNewJumper
STA jpstore,X:TYA:STA jpstore+16,X
DEX
BPL jmploop
RTS
.checkForBlueRed
LDA #gblue%:LDY #jclosed%
ASL inflagsCopyLow%:ROL inflagsCopyHigh%
ASL outflagsCopyLow%:ROL outflagsCopyHigh%:BCC storeNewJumper
LDA #gred%:LDY #jopen%
INC jpCount%
JMP storeNewJumper
.jpstore
EQUS"0123456789ABCDEF"
EQUS"0123456789ABCDEF"
.newrom EQUB0
.oldrom EQUB0

.ReadRtcRam
PHP
JSR SeiSelectRtcAddressX
LDA &FE3C
PLP
RTS

.WriteRtcRam
PHP
JSR SeiSelectRtcAddressX
STA &FE3C
PLP
RTS

.SeiSelectRtcAddressX
SEI
JSR Nop2
STX &FE38
NOP
.Nop2
NOP:NOP
RTS
]
NEXT
ENDPROC

DEFPROCSetSWTable
REM bank, &FE39, &FE3A, &FE3B
REM &FE39: SWRAM 0=Normal 2=Hidden
REM &FE3A: W/P 0..7  0=W/P 1=W/E
REM &FE3B: W/P 8..15 0=W/P 1=W/E
DIMswrammap%(numbanks%-1, 3)
FORn%=0TOnumbanks%-1
FORo%=0TO3
READ swrammap%(n%,o%)
NEXT:NEXT
DATA 11,0,0,8
DATA 9,2,0,2
DATA 10,2,0,4
DATA 11,2,0,8
DATA 12,2,0,16
DATA 13,2,0,32
DATA 14,2,0,64
DATA 15,2,0,128
ENDPROC

DEFFNswram (block%)
?&FE39=swrammap%(block%,1)
?&FE3A=swrammap%(block%,2)
?&FE3B=swrammap%(block%,3)
=swrammap%(block%,0)

DEFFNvercheck
?&FE39=0:ver%=(?&FE38 AND &E0)=&60
IFver% ?&FE39=3:ver%=(?&FE38 AND &E0)=&00
=ver%

DEFFNrecmode
=(?&FE38 AND &10)=&10

DEFFNreadwpflags
shortWP%=0
?&FE38=&3E:loWP%=?&FE3C:?&FE38=&3F:hiWP%=?&FE3C
longWP%=hiWP%*&100+loWP%
FORn%=0TO7
IF(longWP% AND 2^(n%*2))=2^(n%*2) shortWP%=(shortWP% OR 2^n%)
NEXT
=?&FE3F*&100+shortWP%

DEFFNreadrrflags
=?&FE39*&100+(?&FE38 OR &F0)

DEFFNcheckwp
?flagsCopyLow%=wpflags%MOD256:?flagsCopyHigh%=wpflags%DIV256
?inflagsCopyLow%=wpinflags%MOD256:?inflagsCopyHigh%=wpinflags%DIV256
?outflagsCopyLow%=wpoutflags%MOD256:?outflagsCopyHigh%=wpoutflags%DIV256
CALLjumpers
=?jpCount%

DEFFNcheckrr
?flagsCopyLow%=rrflags%MOD256:?flagsCopyHigh%=rrflags%DIV256
?inflagsCopyLow%=rrinflags%MOD256:?inflagsCopyHigh%=rrinflags%DIV256
?outflagsCopyLow%=rroutflags%MOD256:?outflagsCopyHigh%=rroutflags%DIV256
CALLjumpers
=?jpCount%

DEFPROCjumpers
REM tmp%=FNcheckwp
REM PRINT"   J4      Write Protect Jumper Bank"
REM PRINT" ";
REM VDU151,104,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,108,135
REM PRINT'" ";
REM VDU151,106
REM FORn%=15TO0STEP-1
REM PRINT;CHR$(?(jpstore+n%));CHR$(?(jpstore+16+n%));
REM NEXT
REM VDU151,106,135
REM PRINT'" ";
REM VDU151,42,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,46

tmp%=FNcheckrr
PRINT'"      RAM/PALPROM ";:VDU151,106,135:PRINT" Default W/E"
PRINT'"   J2          RAM / ROM Jumper Bank"
PRINT" ";
VDU151,104,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,108,32,32,32,32,32,104,44,44,44,44,44,44,44,44,44,108,135
PRINT'" ";
VDU151,106
FORn%=15TO8STEP-1
PRINT;CHR$(?(jpstore+n%));CHR$(?(jpstore+16+n%));
NEXT
VDU151,106,135,32,32,32,151,106
FORn%=3TO0STEP-1
PRINT;CHR$(?(jpstore+n%));CHR$(?(jpstore+16+n%));
NEXT
VDU151,106,135
PRINT'" ";
VDU151,42,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,46,32,32,32,32,32,42,44,44,44,44,44,44,44,44,44,46

PRINT''"Jumpers to Change:"
VDU146,106,135:PRINT"Install Jumper   ";:VDU145,98,135:PRINT"Remove Jumper"
PRINT"Jumpers to Leave:"
VDU148,106,135:PRINT"Jumper Installed ";:VDU151,98,135:PRINT"Jumper Removed"

ENDPROC
